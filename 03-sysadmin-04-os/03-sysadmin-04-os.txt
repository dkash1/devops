1. На лекции мы познакомились с node_exporter. В демонстрации его исполняемый файл запускался в background. Этого достаточно для демо, но не для настоящей production-системы, где процессы должны находиться под внешним управлением. Используя знания из лекции по systemd, создайте самостоятельно простой unit-файл для node_exporter:

root@netology:/usr/local/bin# systemctl cat prometheus-node-exporter
# /lib/systemd/system/prometheus-node-exporter.service
[Unit]
Description=Prometheus exporter for machine metrics
Documentation=https://github.com/prometheus/node_exporter

[Service]
Restart=always
User=prometheus
EnvironmentFile=/etc/default/prometheus-node-exporter
ExecStart=/usr/bin/prometheus-node-exporter $ARGS
ExecReload=/bin/kill -HUP $MAINPID
TimeoutStopSec=20s
SendSIGKILL=no

[Install]
WantedBy=multi-user.target

-------------------------------------------------------
root@netology:/usr/local/bin# systemctl enable prometheus-node-exporter
Synchronizing state of prometheus-node-exporter.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable prometheus-node-exporter
-------------------------------------------------------

Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg=" - stat" source="n>Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg=" - systemd" source>Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg=" - textfile" sourc>Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg=" - time" source="n>Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg=" - timex" source=">Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg=" - uname" source=">Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg=" - vmstat" source=>Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg=" - xfs" source="no>Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg=" - zfs" source="no>Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg="Listening on :9100>lines 1-20/20 (END)...skipping...
● prometheus-node-exporter.service - Prometheus exporter for machine metrics
     Loaded: loaded (/lib/systemd/system/prometheus-node-exporter.service; enabled; vendor preset: enabled)
     Active: active (running) since Sun 2021-11-28 17:05:23 UTC; 3min 32s ago
       Docs: https://github.com/prometheus/node_exporter
   Main PID: 1439 (prometheus-node)
      Tasks: 4 (limit: 1071)
     Memory: 1.6M
     CGroup: /system.slice/prometheus-node-exporter.service
             └─1439 /usr/bin/prometheus-node-exporter

Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg=" - stat" source="node_exporter.go:104"
Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg=" - systemd" source="node_exporter.go:104"
Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg=" - textfile" source="node_exporter.go:104"
Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg=" - time" source="node_exporter.go:104"
Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg=" - timex" source="node_exporter.go:104"
Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg=" - uname" source="node_exporter.go:104"
Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg=" - vmstat" source="node_exporter.go:104"
Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg=" - xfs" source="node_exporter.go:104"
Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg=" - zfs" source="node_exporter.go:104"
Nov 28 17:05:23 netology prometheus-node-exporter[1439]: time="2021-11-28T17:05:23Z" level=info msg="Listening on :9100" source="node_exporter.go:170"
==============================================
2. Ознакомьтесь с опциями node_exporter и выводом /metrics по-умолчанию. Приведите несколько опций, которые вы бы выбрали для базового мониторинга хоста по CPU, памяти, диску и сети.

CPU:
    node_cpu_seconds_total{cpu="0",mode="idle"} 2238.49
    node_cpu_seconds_total{cpu="0",mode="system"} 16.72
    node_cpu_seconds_total{cpu="0",mode="user"} 6.86
    process_cpu_seconds_total
    
Memory:
    node_memory_MemAvailable_bytes 
    node_memory_MemFree_bytes
    
Disk(если несколько дисков то для каждого):
    node_disk_io_time_seconds_total{device="sda"} 
    node_disk_read_bytes_total{device="sda"} 
    node_disk_read_time_seconds_total{device="sda"} 
    node_disk_write_time_seconds_total{device="sda"}
    
Network(так же для каждого активного адаптера):
    node_network_receive_errs_total{device="eth0"} 
    node_network_receive_bytes_total{device="eth0"} 
    node_network_transmit_bytes_total{device="eth0"}
    node_network_transmit_errs_total{device="eth0"}

==============================================
3. Установите в свою виртуальную машину Netdata. Воспользуйтесь готовыми пакетами для установки (sudo apt install -y netdata). После успешной установки:

в конфигурационном файле /etc/netdata/netdata.conf в секции [web] замените значение с localhost на bind to = 0.0.0.0,
добавьте в Vagrantfile проброс порта Netdata на свой локальный компьютер и сделайте vagrant reload

[global]
    run as user = netdata
    web files owner = root
    web files group = root
    # Netdata is not designed to be exposed to potentially hostile
    # networks. See https://github.com/netdata/netdata/issues/164
    bind socket to IP = 0.0.0.0

==============================================
4. Можно ли по выводу dmesg понять, осознает ли ОС, что загружена не на настоящем оборудовании, а на системе виртуализации?

Да, можно:
root@vagrant:/home/vagrant# dmesg |grep virtualiz
[0.000998] CPU MTRRs all blank - virtualized system.
[0.068677] Booting paravirtualized kernel on KVM
[0.201558] Performance Events: PMU not available due to virtualization, using software events only.
[1.938682] systemd[1]: Detected virtualization oracle

==============================================
5. Как настроен sysctl fs.nr_open на системе по-умолчанию? Узнайте, что означает этот параметр. Какой другой существующий лимит не позволит достичь такого числа (ulimit --help)?

vagrant@netology:~$ /sbin/sysctl -n fs.nr_open
1048576

Это максимальное число открытых дескрипторов для ядра (системы), для пользователя задать больше этого числа нельзя (если не менять). Число задается кратное 1024, в данном случае =1024*1024.

Но макс.предел ОС можно посмотреть так :

vagrant@netology:~$ cat /proc/sys/fs/file-max
9223372036854775807
vagrant@netology:~$ ulimit -Sn
1024
мягкий лимит (так же ulimit -n)на пользователя (может быть увеличен процессов в процессе работы)

vagrant@netology:~$ ulimit -Hn
1048576
жесткий лимит на пользователя (не может быть увеличен, только уменьшен)

Оба ulimit -n НЕ могут превысить системный fs.nr_open

==============================================
6. Запустите любой долгоживущий процесс (не ls, который отработает мгновенно, а, например, sleep 1h) в отдельном неймспейсе процессов; покажите, что ваш процесс работает под PID 1 через nsenter. Для простоты работайте в данном задании под root (sudo -i). Под обычным пользователем требуются дополнительные опции (--map-root-user) и т.д.

root@netology:~# ps -e |grep sleep
2020 pts/2    00:00:00 sleep
root@netology:~# nsenter --target 2020 --pid --mount
root@netology:/# ps
    PID TTY          TIME CMD
    2 pts/0    00:00:00 bash
    11 pts/0    00:00:00 ps
==============================================
7. Найдите информацию о том, что такое :(){ :|:& };:. Запустите эту команду в своей виртуальной машине Vagrant с Ubuntu 20.04 (это важно, поведение в других ОС не проверялось). Н екоторое время все будет "плохо", после чего (минуты) – ОС должна стабилизироваться. Вызов dmesg расскажет, какой механизм помог автоматической стабилизации. Как настроен этот механизм по-умолчанию, и как изменить число процессов, которое можно создать в сессии?

[ 3099.973235] cgroup: fork rejected by pids controller in /user.slice/user-1000.slice/session-4.scope
[ 3103.171819] cgroup: fork rejected by pids controller in /user.slice/user-1000.slice/session-11.scope

Если установить ulimit -u 50 - число процессов будет ограниченно 50 для пользователя
==============================================
