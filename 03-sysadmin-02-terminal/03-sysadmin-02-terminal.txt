1. Какого типа команда cd? Попробуйте объяснить, почему она именно такого типа; опишите ход своих мыслей, если считаете что она могла бы быть другого типа.
Это команда встройенного типа, т.к. работает внутри сессии терминала. 
Если использовать внешний вызов, то он будет работать со своим окружением, и менять  текущий каталог внутри своего окружения, а на вызвовший shell влиять не будет.  

Теоретически можно сделать CD внешней программой, но после смены деректории необходимо вызвать bash из этого (нового каталога), но тогда мы получим новый shell.
И выходя из сесии придется выходить, опять же, из всех сессий, которые создали при каждом вызове внешней CD.
==============================================
2. Какая альтернатива без pipe команде grep <some_string> <some_file> | wc -l? man grep поможет в ответе на этот вопрос. Ознакомьтесь с документом о других подобных некорректных вариантах использования pipe.

Ответ:
vagrant@netology:~$ cat tst_bash
if [[ -d /tmp ]];
sdgsdfgfd
sdgsdfgfghdgfd
123
vagrant@netology:~$ grep 123 tst_bash -c
1
vagrant@netology:~$ grep 123 tst_bash |wc -l
1
==============================================
3. Какой процесс с PID 1 является родителем для всех процессов в вашей виртуальной машине Ubuntu 20.04?

vagrant@netology:~$ pstree -p
systemd(1)─┬─VBoxService(763)─┬─{VBoxService}(764)
           │                  ├─{VBoxService}(765)
           │                  ├─{VBoxService}(766)
           │                  ├─{VBoxService}(767)
           │                  ├─{VBoxService}(768)
           │                  ├─{VBoxService}(769)
           │                  ├─{VBoxService}(770)
           │                  └─{VBoxService}(771)
==============================================
4.Как будет выглядеть команда, которая перенаправит вывод stderr ls на другую сессию терминала?
pts/0:
vagrant@vagrant:~$ ls -l \root 2>/dev/pts/1
vagrant@vagrant:~$ 
    

pts/1:    
vagrant@netology:~$ who
vagrant  pts/0        2021-11-20 16:11 (10.0.2.15)
vagrant  pts/1        2021-11-20 16:12 (10.0.2.15)
vagrant@netology:~$ ls: cannot access 'root': No such file or directory
==============================================
5. Получится ли одновременно передать команде файл на stdin и вывести ее stdout в другой файл? Приведите работающий пример.

vagrant@netology:~$ cat tst_bash
if [[ -d /tmp ]];
    sdgsdfgfd
    sdgsdfgfghdgfd
vagrant@netology:~$ cat tst_bash_out
cat: tst_bash_out: No such file or directory 
vagrant@netology:~$ cat <tst_bash >tst_bash_out
vagrant@netology:~$ cat tst_bash_out
if [[ -d /tmp ]];
    sdgsdfgfd
    sdgsdfgfghdgfd
vagrant@netology:~$ 
==============================================
6. Получится ли находясь в графическом режиме, вывести данные из PTY в какой-либо из эмуляторов TTY? Сможете ли вы наблюдать выводимые данные?

root@netology:/home/vagrant# tty
/dev/pts/0
root@netology:/home/vagrant# echo Hello netology pts0 to tty > /dev/tty
Hello netology pts0 to tty
root@netology:/home/vagrant# echo Hello netology tty to pts0 > /dev/tty
Hello netology tty to pts0
root@netology:/home/vagrant# echo Hello netology tty to pts0 > /dev/
==============================================
7. Выполните команду bash 5>&1. К чему она приведет? Что будет, если вы выполните echo netology > /proc/$$/fd/5? Почему так происходит?
bash 5>&1 - Создаст дескриптор с 5 и перенаправит его в stdout echo netology > /proc/$$/fd/5 - выведет в дескриптор "5", который был пернеаправлен в stdout

root@netology:/home/vagrant# echo netology > /proc/$$/fd/5
bash: /proc/1087/fd/5: No such file or directory
root@netology:/home/vagrant# bash 5>&1
root@netology:/home/vagrant# echo netology > /proc.$$/fd/5
bash: /proc.1098/fd/5: No such file or directory
root@netology:/home/vagrant# echo netology > /proc/$$/fd/5
netology
root@netology:/home/vagrant#
==============================================
8. Получится ли в качестве входного потока для pipe использовать только stderr команды, не потеряв при этом отображение stdout на pty? Напоминаем: по умолчанию через pipe передается только stdout команды слева от | на stdin команды справа. Это можно сделать, поменяв стандартные потоки местами через промежуточный новый дескриптор, который вы научились создавать в предыдущем вопросе.

vagrant@netology:~$ ls -l /root 9>&2 2>&1 1>&9 |grep denied -c 
1
vagrant@netology:~$

9>&2 - новый дескриптор перенаправили в stderr
2>&1 - stderr перенаправили в stdout 
1>&9 - stdout - перенаправили в в новый дескриптор
==============================================
9. то выведет команда cat /proc/$$/environ? Как еще можно получить аналогичный по содержанию вывод?
Будут выведены переменные окружения:
можно получить тоже самое (только с разделением по переменным по строкам):
printenv
env
==============================================
10. Используя man, опишите что доступно по адресам /proc/<PID>/cmdline, /proc/<PID>/exe

/proc/<PID>/cmdline - полный путь до исполняемого файла процесса [PID]  (строка 231)
/proc/<PID>/exe - содержит ссылку до файла запущенного для процесса [PID], cat выведет содержимое запущенного файла, запуск этого файла,  запустит еще одну копию самого файла  (строка 285)

==============================================
11. Узнайте, какую наиболее старшую версию набора инструкций SSE поддерживает ваш процессор с помощью /proc/cpuinfo
sse 4_2
==============================================
12. При открытии нового окна терминала и vagrant ssh создается новая сессия и выделяется pty. Это можно подтвердить командой tty, которая упоминалась в лекции 3.2. Однако:

При подключении ожидается пользователь, а не другой процесс, и нет локального tty в данный момент. Для запуска можно добавить -t - , и команда исполняется c принудительным созданием псевдотерминала

vagrant@netology:~$ ssh -t localhost 'tty'
The authenticity of host 'localhost (::1)' can't be established.
ECDSA key fingerprint is SHA256:wSHl+h4vAtTT7mbkj2lbGyxWXWTUf6VUliwpncjwLPM.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added 'localhost' (ECDSA) to the list of known hosts.
vagrant@localhost's password:
/dev/pts/1
Connection to localhost closed.
vagrant@netology:~$
==============================================
13. Бывает, что есть необходимость переместить запущенный процесс из одной сессии в другую. Попробуйте сделать это, воспользовавшись reptyr. Например, так можно перенести в screen процесс, который вы запустили по ошибке в обычной SSH-сессии.
Для решения этого вопроса, понадобится изменить значение kernel.yama.ptrace_scope = 0
После чего процесс был перехвачен в screen, и продолжил работу после закрытия терминала
==============================================
14. sudo echo string > /root/new_file не даст выполнить перенаправление под обычным пользователем, так как перенаправлением занимается процесс shell'а, который запущен без sudo под вашим пользователем. Для решения данной проблемы можно использовать конструкцию echo string | sudo tee /root/new_file. Узнайте что делает команда tee и почему в отличие от sudo echo команда с sudo tee будет работать.

tee делает вывод одновременно и в файл указаный в качестве параметра, и в stdout, 
в данном примере команда получает вывод из stdin, перенаправленный через pipe от stdout команды echo
и так как команда запущена от sudo , соотвественно имеет права на запись в файл 
==============================================
