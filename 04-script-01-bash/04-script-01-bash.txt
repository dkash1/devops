1. Есть скрипт:

a=1
b=2
c=a+b
d=$a+$b
e=$(($a+$b))
Какие значения переменным c,d,e будут присвоены?
Почему?

root@Devops:/home/kdr# a=1
b=2
c=a+b
d=$a+$b
e=$(($a+$b))
root@Devops:/home/kdr# echo $c
a+b
root@Devops:/home/kdr# echo $d
1+2
root@Devops:/home/kdr# echo $e
3

Результат первых двух переменных отсутствует т.к. это по умолчанию это строки.
Результат в третьей переменной появляется за счет скобок.
==========================================================
2. На нашем локальном сервере упал сервис и мы написали скрипт, который постоянно проверяет его доступность, записывая дату проверок до тех пор, пока сервис не станет доступным. В скрипте допущена ошибка, из-за которой выполнение не может завершиться, при этом место на Жёстком Диске постоянно уменьшается. Что необходимо сделать, чтобы его исправить:

while ((1==1)
do
curl https://localhost:4757
if (($? != 0))
then
date >> curl.log
fi
done

В операциях с циклами используются квадратными скобки.
Для проверки доступности раз в минуту добавим sleep 60

while [ 1=1 ]
do
curl https://localhost:4757
if [ $? != 0 ]
then
date >> curl.log
fi
sleep 60
done
==========================================================
3. Необходимо написать скрипт, который проверяет доступность трёх IP: 192.168.0.1, 173.194.222.113, 87.250.250.242 по 80 порту и записывает результат в файл log. Проверять доступность необходимо пять раз для каждого узла.

while [ 1=1 ]
do  
for i in 192.168.0.1 173.194.222.113 87.250.250.242
do 
for ((j=0;j < 5;j++))
do
curl http://$i
if [ $? != 0 ]
then
date >> curl.log
echo $i >> curl.log
fi
sleep 1
done
done
sleep 20
done 
==========================================================
4. Необходимо дописать скрипт из предыдущего задания так, чтобы он выполнялся до тех пор, пока один из узлов не окажется недоступным. Если любой из узлов недоступен - IP этого узла пишется в файл error, скрипт прерывается

while [ 1=1 ]
do  
for i in 192.168.0.1 173.194.222.113 87.250.250.242
do 
for ((j=0;j < 5;j++))
curl http://$i
if [ $? != 0 ]
then
date >> curl.log
echo ERROR $i  >> curl.log
exit
fi
sleep 1
done
done
sleep 20
done
