1. Какой системный вызов делает команда cd? В прошлом ДЗ мы выяснили, что cd не является самостоятельной программой, это shell builtin, поэтому запустить strace непосредственно на cd не получится. Тем не менее, вы можете запустить strace на /bin/bash -c 'cd /tmp'. В этом случае вы увидите полный список системных вызовов, которые делает сам bash при старте. Вам нужно найти тот единственный, который относится именно к cd. Обратите внимание, что strace выдаёт результат своей работы в поток stderr, а не в stdout.
Системный вызов chdir chdir("/tmp")  
==============================================
2. Попробуйте использовать команду file на объекты разных типов на файловой системе. 
Используя strace выясните, где находится база данных file на основании которой она делает свои догадки.

openat(AT_FDCWD, "/usr/share/misc/magic.mgc", O_RDONLY) = 3

==============================================
3.Предположим, приложение пишет лог в текстовый файл. Этот файл оказался удален (deleted в lsof), однако возможности сигналом сказать приложению переоткрыть файлы или просто перезапустить приложение – нет. Так как приложение продолжает писать в удаленный файл, место на диске постепенно заканчивается. Основываясь на знаниях о перенаправлении потоков предложите способ обнуления открытого удаленного файла (чтобы освободить место на файловой системе).

vagrant@netology:~$ lsof  | grep net1
vim       1898                       vagrant    4u      REG              253,0    12288     131094 /home/vagrant/.net1.txt.swp (deleted)
vagrant@netology:~$ echo '' >/proc/1898/fd/4
==============================================
4. Занимают ли зомби-процессы какие-то ресурсы в ОС (CPU, RAM, IO)?
Не занимают (либо минимум), зомби процессы вообще не являются реальными процессами.
Это просто записи в таблице процессов ядра.

==============================================
5. В iovisor BCC есть утилита opensnoop:
root@vagrant:~# dpkg -L bpfcc-tools | grep sbin/opensnoop
/usr/sbin/opensnoop-bpfcc

vagrant@netology:~$ sudo /usr/sbin/opensnoop-bpfcc
PID    COMM               FD ERR PATH
763    vminfo              5   0 /var/run/utmp
550    dbus-daemon        -1   2 /usr/local/share/dbus-1/system-services
550    dbus-daemon        18   0 /usr/share/dbus-1/system-services
550    dbus-daemon        -1   2 /lib/dbus-1/system-services
550    dbus-daemon        18   0 /var/lib/snapd/dbus-1/system-services/
==============================================
6. Какой системный вызов использует uname -a? Приведите цитату из man по этому системному вызову, где описывается

Part of the utsname information is also accessible  via  /proc/sys/ker‐
       nel/{ostype, hostname, osrelease, version, domainname}

==============================================
7. Чем отличается последовательность команд через ; и через && в bash?

&& -  условный оператор, 
а ;  - разделитель последовательных команд

test -d /tmp/some_dir && echo Hi - в данном случае echo  отработает только при успешном заверщении команды test

set -e - прерывает сессию при любом ненулевом значении исполняемых команд в конвеере кроме последней.
в случае &&  вместе с set -e- вероятно не имеет смысла, так как при ошибке , выполнение команд прекратиться. 
==============================================
8. Из каких опций состоит режим bash set -euxo pipefail и почему его хорошо было бы использовать в сценариях?

-e прерывает выполнение исполнения при ошибке любой команды кроме последней в последовательности 
-x вывод трейса простых команд 
-u неустановленные/не заданные параметры и переменные считаются как ошибки, с выводом в stderr текста ошибки и выполнит завершение неинтерактивного вызова
-o pipefail возвращает код возврата набора/последовательности команд, ненулевой при последней команды или 0 для успешного выполнения команд.
==============================================
9. Используя -o stat для ps, определите, какой наиболее часто встречающийся статус у процессов в системе. В man ps ознакомьтесь (/PROCESS STATE CODES) что значат дополнительные к основной заглавной буквы статуса процессов. Его можно не учитывать при расчете (считать S, Ss или Ssl равнозначными).

S*(S,S+,Ss,Ssl,Ss+) - Процессы ожидающие завершения (спящие с прерыванием "сна")
I*(I,I<) - фоновые(бездействующие) процессы ядра
